// so_activex.idl : IDL source for so_activex.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (so_activex.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"


    [
        object,
        uuid(DACF7E3F-626B-4BF9-964B-F4910C843711),
        dual,
        helpstring("ISOActiveX Interface"),
        pointer_default(unique)
    ]
    interface ISOActiveX : IDispatch
    {
    };

[
    object,
    uuid(BF5D10F3-8A10-4A0B-B150-2B6AA2D7E118),
    dual,
    helpstring("ISOComWindowPeer Interface"),
    pointer_default(unique)
]
interface ISOComWindowPeer : IDispatch
{
    [id(1), helpstring("method getWindowHandle")] 
                HRESULT getWindowHandle( [in] SAFEARRAY(VARIANT) procId,
                                         [in] short s,
                                         [out,retval] long* ret);

    [id(2), helpstring("method getToolkit")] 
                HRESULT getToolkit( [out,retval] IDispatch** retVal );

    [id(3), helpstring("method setPointer")] 
                HRESULT setPointer( [in] IDispatch* xPointer );

    [id(4), helpstring("method setBackground")] 
                HRESULT setBackground( [in] int nColor );

    [id(5), helpstring("method invalidate")] 
                HRESULT invalidate( [in] short );

    [id(6), helpstring("method invalidateRect")] 
                HRESULT invalidateRect( [in] IDispatch* aRect, [in] short nFlags );

    [id(7), helpstring("method dispose")] 
                HRESULT dispose();

    [id(8), helpstring("method addEventListener")] 
                HRESULT addEventListener( [in] IDispatch* xListener );

    [id(9), helpstring("method removeEventListener")] 
                HRESULT removeEventListener( [in] IDispatch* xListener );

    [propget, id(10), helpstring("property_implementedInterfaces")] 
                HRESULT Bridge_implementedInterfaces([out, retval] SAFEARRAY(BSTR) *pVal);
};

[
    uuid(61FA3F13-8061-4796-B055-3697ED28CB38),
    version(1.0),
    helpstring("so_activex 1.0 Type Library")
]
library SO_ACTIVEXLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(7F760565-5719-4F04-BA86-112C474B10EA),
        helpstring("_ISOActiveXEvents Interface")
    ]
    dispinterface _ISOActiveXEvents
    {
        properties:
        methods:
    };

    [
        uuid(67F2A879-82D5-4A6D-8CC5-FFB3C114B69D),
        helpstring("SOActiveX Class")
    ]
    coclass SOActiveX
    {
        [default] interface ISOActiveX;
        [default, source] dispinterface _ISOActiveXEvents;
    };

    [
        uuid(EE51BD3E-8BB6-4FB8-B319-F65B1BE3B21D),
        helpstring("SOComWindowPeer Class")
    ]
    coclass SOComWindowPeer
    {
        [default] interface ISOComWindowPeer;
    };
};

